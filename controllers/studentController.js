const db = require("../db/db");
const estadosUsuarios = require("../utils/estadosUsuarios");
const { enviarPreguntaPorId } = require("./questionController");

const CLAVE_ACCESO = "123456";  // clave del sistema

// Cuando se env√≠a /start
async function manejarInicio(bot, msg) {
  const chatId = msg.chat.id;

  // Verificamos si ya est√° registrado
  const existe = await db.query("SELECT * FROM Estudiantes WHERE telegram_id = $1", [chatId]);

  if (existe.rows.length > 0) {
    await bot.sendMessage(chatId, "üëã ¬°Hola de nuevo! Ya est√°s registrado. Espera tu pr√≥xima pregunta.");
    return;
  }

  // Si no est√° registrado, pedimos la clave
  await bot.sendMessage(chatId, "üëã ¬°Hola, bienvenido al chatbot de la clase de Dise√±o y Programaci√≥n Orientada a Objetos! üîë Por favor, ingresa tu clave de acceso para continuar: ");
  estadosUsuarios[chatId] = { estado: "esperando_clave" };
}

// Cuando el usuario env√≠a cualquier texto
async function manejarTexto(bot, msg) {
  const chatId = msg.chat.id;
  const texto = msg.text?.trim();
  const estado = estadosUsuarios[chatId];

  if (!estado) return;

  switch (estado.estado) {
    case "esperando_clave":
      if (texto === CLAVE_ACCESO) {
        estadosUsuarios[chatId] = { estado: "esperando_nombre" };
        await bot.sendMessage(chatId, "‚úÖ Clave correcta. ¬øCu√°l es tu *nombre completo*?", { parse_mode: "Markdown" });
      } else {
        await bot.sendMessage(chatId, "‚ùå Clave incorrecta. Intenta nuevamente.");
      }
      break;

    case "esperando_nombre":
      estadosUsuarios[chatId].nombre = texto;
      estadosUsuarios[chatId].estado = "esperando_codigo";
      await bot.sendMessage(chatId, "üìõ Por favor, escribe tu *c√≥digo estudiantil*:", { parse_mode: "Markdown" });
      break;

    case "esperando_codigo":
      estadosUsuarios[chatId].codigo = texto;
      estadosUsuarios[chatId].estado = "esperando_grupo";
      await bot.sendMessage(chatId, "üë• ¬øA qu√© *grupo* perteneces?", { parse_mode: "Markdown" });
      break;

    case "esperando_grupo":
      estadosUsuarios[chatId].grupo = texto;

    
      try {
  const { nombre, codigo, grupo } = estadosUsuarios[chatId];

  // ‚úÖ VALIDAR si el c√≥digo ya fue registrado por otro usuario
  const existente = await db.query(
    "SELECT * FROM Estudiantes WHERE codigoEstudiante = $1 AND telegram_id != $2",
    [codigo, chatId]
  );

  if (existente.rows.length > 0) {
    await bot.sendMessage(chatId, "‚ö†Ô∏è Ya existe un estudiante registrado con este c√≥digo. Verifica que sea correcto el *c√≥digo estudiantil* y ejecuta nuevamente el comando */start*", { parse_mode: "Markdown" });
    return;
  }

  // ‚úÖ Guardamos el estudiante si todo est√° bien
  await db.query(
    `INSERT INTO Estudiantes (telegram_id, nombreEstudiante, codigoEstudiante, grupo, fecha_ingreso, pregunta_actual)
     VALUES ($1, $2, $3, $4, NOW(), 2)
     ON CONFLICT (telegram_id) DO UPDATE
     SET nombreEstudiante = $2, codigoEstudiante = $3, grupo = $4, fecha_ingreso = NOW()`,
    [chatId, nombre, codigo, grupo]
  );

  await bot.sendMessage(chatId, "‚úÖ Registro completado con √©xito ‚úÖ. Aqu√≠ tienes tu primera pregunta:");

  // Enviar la primera pregunta (ID 1)
  await enviarPreguntaPorId(bot, chatId, 1);

  estadosUsuarios[chatId] = null;

} catch (err) {
  console.error("‚ùå Error al guardar estudiante ‚ùå", err);
  await bot.sendMessage(chatId, "‚ö†Ô∏è Ocurri√≥ un error al guardar tus datos. Porfavor intenta m√°s tarde ‚ö†Ô∏è");
}
  }
}

async function verProgreso(bot, msg) {
  const chatId = msg.chat.id;

  try {
    // Obtener c√≥digo del estudiante
    const estudiante = await db.query("SELECT codigoEstudiante, pregunta_actual FROM Estudiantes WHERE telegram_id = $1", [chatId]);
    if (estudiante.rows.length === 0) {
      await bot.sendMessage(chatId, "‚ùå No est√°s registrado. Usa /start para comenzar.");
      return;
    }

    const codigo = estudiante.rows[0].codigoestudiante;
    const totalRespondidas = estudiante.rows[0].pregunta_actual - 1;

    // Contar aciertos
    const aciertos = await db.query(
      `SELECT COUNT(*) FROM respuestas WHERE codigoestudiante = $1 AND correcta = true`,
      [codigo]
    );

    const cantidadCorrectas = aciertos.rows[0].count;

    await bot.sendMessage(
      chatId,
      `üìà Has respondido *${totalRespondidas}* preguntas.\n‚úÖ Has acertado *${cantidadCorrectas}*.\nüïê Tu pr√≥xima pregunta llegar√° ma√±ana a las 8:00 a.m. üïê`,
      { parse_mode: "Markdown" }
    );

  } catch (error) {
    console.error("‚ùå Error al consultar progreso ‚ùå", error.message);
    await bot.sendMessage(chatId, "‚ö†Ô∏è Ocurri√≥ un error al obtener tu progreso ‚ö†Ô∏è");
  }
}

module.exports = {
  manejarInicio,
  manejarTexto,
  verProgreso
};
